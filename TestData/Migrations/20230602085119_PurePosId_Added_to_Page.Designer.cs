// <auto-generated />
using System;
using CloudData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CloudData.Migrations
{
    [DbContext(typeof(CloudContext))]
    [Migration("20230602085119_PurePosId_Added_to_Page")]
    partial class PurePosId_Added_to_Page
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CloudDomain.Domain.Application", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAssignable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StartAfterInstall")
                        .HasColumnType("bit");

                    b.Property<int>("StartMode")
                        .HasColumnType("int");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Application");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreatedDate = new DateTime(2023, 6, 2, 11, 51, 19, 553, DateTimeKind.Local).AddTicks(6866),
                            ExeName = "Giftcard.exe",
                            IsAssignable = true,
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 6, 2, 11, 51, 19, 553, DateTimeKind.Local).AddTicks(6877),
                            Name = "PurePOSGiftcardService",
                            StartAfterInstall = false,
                            StartMode = 0,
                            UID = new Guid("2c95d909-87bf-4260-9456-416be57aff04")
                        });
                });

            modelBuilder.Entity("CloudDomain.Domain.AppSetting", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AppSetting");
                });

            modelBuilder.Entity("CloudDomain.Domain.ConnectedApp", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("StationId");

                    b.ToTable("ConnectedApp");
                });

            modelBuilder.Entity("CloudDomain.Domain.EmailSetting", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EnableSSL")
                        .HasColumnType("bit");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeOut")
                        .HasColumnType("int");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("EmailSetting");
                });

            modelBuilder.Entity("CloudDomain.Domain.InstallLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StartMode")
                        .HasColumnType("int");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("StationId");

                    b.ToTable("InstallLog");
                });

            modelBuilder.Entity("CloudDomain.Domain.Menu", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Expanded")
                        .HasColumnType("bit");

                    b.Property<string>("Href")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ParentID")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("CloudDomain.Domain.Module", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPack")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("CloudDomain.Domain.ReleaseDetail", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReleaseNumberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("PageId");

                    b.HasIndex("ReleaseNumberId");

                    b.ToTable("ReleaseDetail");
                });

            modelBuilder.Entity("CloudDomain.Domain.ReleaseNumber", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("ReleaseNumber");
                });

            modelBuilder.Entity("CloudDomain.Domain.Report", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("CloudDomain.Domain.Role", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("CloudDomain.Domain.Shop", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShopGroupId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ShopGroupId");

                    b.ToTable("Shop");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreatedDate = new DateTime(2023, 6, 2, 11, 51, 19, 553, DateTimeKind.Local).AddTicks(7071),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 6, 2, 11, 51, 19, 553, DateTimeKind.Local).AddTicks(7073),
                            Name = "Default Shop",
                            ShopGroupId = 1L,
                            UID = new Guid("3a0521dd-db52-4db3-9fe2-bebd2c844516")
                        });
                });

            modelBuilder.Entity("CloudDomain.Domain.ShopGroup", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("ShopGroup");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreatedDate = new DateTime(2023, 6, 2, 11, 51, 19, 553, DateTimeKind.Local).AddTicks(7038),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 6, 2, 11, 51, 19, 553, DateTimeKind.Local).AddTicks(7040),
                            Name = "Default Group",
                            UID = new Guid("0ffb52f5-6ff4-4ba8-b4c4-63a9d375652a")
                        });
                });

            modelBuilder.Entity("CloudDomain.Domain.ShopSetting", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<int>("ConcurrentBoCount")
                        .HasColumnType("int");

                    b.Property<int>("ConcurrentFoCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DefaultReportId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmailSettingId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LicenseExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ReportID")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("EmailSettingId");

                    b.HasIndex("ReportID");

                    b.ToTable("ShopSetting");
                });

            modelBuilder.Entity("CloudDomain.Domain.Station", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ShopId");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("CloudDomain.Domain.StationApp", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<long>("ApplicationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StartAfterInstall")
                        .HasColumnType("bit");

                    b.Property<int>("StartMode")
                        .HasColumnType("int");

                    b.Property<long>("StationId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("StationId");

                    b.ToTable("StationApp");
                });

            modelBuilder.Entity("CloudDomain.Domain.User", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValidated")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RememberMe")
                        .HasColumnType("bit");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ShopId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreatedDate = new DateTime(2023, 6, 2, 11, 51, 19, 553, DateTimeKind.Local).AddTicks(7091),
                            Email = "admin@posmanager.nl",
                            IsDeleted = false,
                            IsValidated = true,
                            ModifiedDate = new DateTime(2023, 6, 2, 11, 51, 19, 553, DateTimeKind.Local).AddTicks(7093),
                            Password = "PoS666",
                            RememberMe = true,
                            ShopId = 1L,
                            UID = new Guid("1bb31986-b56c-4a62-9aae-5956d659092d")
                        });
                });

            modelBuilder.Entity("CloudDomain.EmailLog", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<string>("AttachmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttachmentUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bcc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("ShopId");

                    b.ToTable("EmailLog");
                });

            modelBuilder.Entity("CloudDomain.Page", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurePosId")
                        .HasColumnType("int");

                    b.Property<Guid>("UID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.ToTable("Page");

                    b.HasData(
                        new
                        {
                            ID = 1L,
                            CreatedDate = new DateTime(2023, 6, 2, 11, 51, 19, 553, DateTimeKind.Local).AddTicks(7098),
                            IsDeleted = false,
                            ModifiedDate = new DateTime(2023, 6, 2, 11, 51, 19, 553, DateTimeKind.Local).AddTicks(7099),
                            Name = "Users",
                            PurePosId = 2,
                            UID = new Guid("bfd9ecb4-9f37-4b0d-8418-932766396070")
                        });
                });

            modelBuilder.Entity("MenuRole", b =>
                {
                    b.Property<long>("MenusID")
                        .HasColumnType("bigint");

                    b.Property<long>("RolesID")
                        .HasColumnType("bigint");

                    b.HasKey("MenusID", "RolesID");

                    b.HasIndex("RolesID");

                    b.ToTable("MenuRole");
                });

            modelBuilder.Entity("ModulePage", b =>
                {
                    b.Property<long>("ModulesID")
                        .HasColumnType("bigint");

                    b.Property<long>("PagesID")
                        .HasColumnType("bigint");

                    b.HasKey("ModulesID", "PagesID");

                    b.HasIndex("PagesID");

                    b.ToTable("ModulePage");
                });

            modelBuilder.Entity("ReleaseNumberShop", b =>
                {
                    b.Property<long>("ReleaseNumbersID")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopsID")
                        .HasColumnType("bigint");

                    b.HasKey("ReleaseNumbersID", "ShopsID");

                    b.HasIndex("ShopsID");

                    b.ToTable("ReleaseNumberShop");
                });

            modelBuilder.Entity("ReleaseNumberShopGroup", b =>
                {
                    b.Property<long>("ReleaseNumbersID")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopGroupsID")
                        .HasColumnType("bigint");

                    b.HasKey("ReleaseNumbersID", "ShopGroupsID");

                    b.HasIndex("ShopGroupsID");

                    b.ToTable("ReleaseNumberShopGroup");
                });

            modelBuilder.Entity("ReportShop", b =>
                {
                    b.Property<long>("ReportsID")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopsID")
                        .HasColumnType("bigint");

                    b.HasKey("ReportsID", "ShopsID");

                    b.HasIndex("ShopsID");

                    b.ToTable("ReportShop");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<long>("RolesID")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersID")
                        .HasColumnType("bigint");

                    b.HasKey("RolesID", "UsersID");

                    b.HasIndex("UsersID");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("CloudDomain.Domain.ConnectedApp", b =>
                {
                    b.HasOne("CloudDomain.Domain.Application", null)
                        .WithMany("ConnectedApps")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Domain.Station", null)
                        .WithMany("ConnectedApps")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudDomain.Domain.InstallLog", b =>
                {
                    b.HasOne("CloudDomain.Domain.Application", null)
                        .WithMany("InstallLogs")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Domain.Station", null)
                        .WithMany("InstallLogs")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudDomain.Domain.ReleaseDetail", b =>
                {
                    b.HasOne("CloudDomain.Domain.Application", null)
                        .WithMany("ReleaseDetails")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Page", null)
                        .WithMany("ReleaseDetails")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Domain.ReleaseNumber", null)
                        .WithMany("ReleaseDetails")
                        .HasForeignKey("ReleaseNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudDomain.Domain.Shop", b =>
                {
                    b.HasOne("CloudDomain.Domain.ShopGroup", null)
                        .WithMany("Shops")
                        .HasForeignKey("ShopGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudDomain.Domain.ShopSetting", b =>
                {
                    b.HasOne("CloudDomain.Domain.EmailSetting", null)
                        .WithMany("ShopSettings")
                        .HasForeignKey("EmailSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Domain.Report", null)
                        .WithMany("ShopSettings")
                        .HasForeignKey("ReportID");
                });

            modelBuilder.Entity("CloudDomain.Domain.Station", b =>
                {
                    b.HasOne("CloudDomain.Domain.Shop", null)
                        .WithMany("Stations")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudDomain.Domain.StationApp", b =>
                {
                    b.HasOne("CloudDomain.Domain.Application", null)
                        .WithMany("StationApps")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Domain.Station", null)
                        .WithMany("StationApps")
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudDomain.Domain.User", b =>
                {
                    b.HasOne("CloudDomain.Domain.Shop", null)
                        .WithMany("Users")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudDomain.EmailLog", b =>
                {
                    b.HasOne("CloudDomain.Domain.Shop", null)
                        .WithMany("EmailLogs")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MenuRole", b =>
                {
                    b.HasOne("CloudDomain.Domain.Menu", null)
                        .WithMany()
                        .HasForeignKey("MenusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModulePage", b =>
                {
                    b.HasOne("CloudDomain.Domain.Module", null)
                        .WithMany()
                        .HasForeignKey("ModulesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Page", null)
                        .WithMany()
                        .HasForeignKey("PagesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReleaseNumberShop", b =>
                {
                    b.HasOne("CloudDomain.Domain.ReleaseNumber", null)
                        .WithMany()
                        .HasForeignKey("ReleaseNumbersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Domain.Shop", null)
                        .WithMany()
                        .HasForeignKey("ShopsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReleaseNumberShopGroup", b =>
                {
                    b.HasOne("CloudDomain.Domain.ReleaseNumber", null)
                        .WithMany()
                        .HasForeignKey("ReleaseNumbersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Domain.ShopGroup", null)
                        .WithMany()
                        .HasForeignKey("ShopGroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReportShop", b =>
                {
                    b.HasOne("CloudDomain.Domain.Report", null)
                        .WithMany()
                        .HasForeignKey("ReportsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Domain.Shop", null)
                        .WithMany()
                        .HasForeignKey("ShopsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("CloudDomain.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CloudDomain.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CloudDomain.Domain.Application", b =>
                {
                    b.Navigation("ConnectedApps");

                    b.Navigation("InstallLogs");

                    b.Navigation("ReleaseDetails");

                    b.Navigation("StationApps");
                });

            modelBuilder.Entity("CloudDomain.Domain.EmailSetting", b =>
                {
                    b.Navigation("ShopSettings");
                });

            modelBuilder.Entity("CloudDomain.Domain.ReleaseNumber", b =>
                {
                    b.Navigation("ReleaseDetails");
                });

            modelBuilder.Entity("CloudDomain.Domain.Report", b =>
                {
                    b.Navigation("ShopSettings");
                });

            modelBuilder.Entity("CloudDomain.Domain.Shop", b =>
                {
                    b.Navigation("EmailLogs");

                    b.Navigation("Stations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CloudDomain.Domain.ShopGroup", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("CloudDomain.Domain.Station", b =>
                {
                    b.Navigation("ConnectedApps");

                    b.Navigation("InstallLogs");

                    b.Navigation("StationApps");
                });

            modelBuilder.Entity("CloudDomain.Page", b =>
                {
                    b.Navigation("ReleaseDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
